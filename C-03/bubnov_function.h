//#include <stdio.h>
#include <stdbool.h>

#ifndef BUBNOV_FUNCTION_H
#define BUBNOV_FUNCTION_H

// decomposition into bit components
// функци€ раскладывает простое число на разр€дные слагаемые
// 12345 -> |1|2|3|4|5|
// на входе целое число, на выходе массив элементами которого €вл€ютс€ 
// разрадные слагаемые
void decomposIntoBitComponents(int num, int *m);

// функци€ выводит на экран консоли элементы массива
// первый элемент массива равен его размеру
// на входе массив целых чисел первй элемент которого размер массива
void printArray(int m[]);

// функци€ производит реверс массива
// первый элемент массива равен его размеру и остаетс€ на своем месте
void reversArray(int m[]);

// функци€ провер€ет массив на симметричность (палиндром) и
// в случае положительного результата возвращает true
// если массив не симметричен и состоит из одного элемента возвращает false
_Bool palindromeArray(int m[]);

//-----------------------------------------------------------------------------------
// функции дл€ работы с массивами дл€ заданий модул€ є06

// функци€ создани€ массива
// первый элемент созданного массива равен значению количества его элементов
//void createArray(int *m, const unsigned int size_m);

// функци€ заполнени€ массива случайными числами
// первый элемент массива равен значению количества его элементов
// m - входной массив
// size_m - размер массива
// range - диапазон генерируемых значени€
void generatorArray(int m[], int size_m, int range);

// нахождение максимального элемента в массиве
// numMaxElemen - номер максимального элемента в массиве
int maxElementArray(int m[], int *numMaxElemen);

// нахождение минимального элемента в массиве
// numMinElemen - номер минимального элемента в массиве
int minElementArray(int m[], int *numMinElemen);

// сортировка массива по методу максимума
void sortArray(int m[]);

// линейный поиск элемента в массиве
_Bool searchElementArray(int elem, int m[], int *numElem);

#endif // !MY_FUNCTION_H